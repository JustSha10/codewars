
// Задача: У вас есть объект Dog, который представляет собой собаку. 
// Вы хотите добавить возможность тренировать собаку различным командам. 
// Каждая команда должна вызывать определенный метод собаки. 
// Для этого вы будете использовать функции обратного вызова и метод call для связывания этих функций с объектом Dog.


// Объект, представляющий собаку
const Dog = {
  name: "Buddy",

  // Метод для выполнения команды "сидеть"
  sit: function() {
    console.log(this.name + " сел.");
  },

  // Метод для выполнения команды "лежать"
  lieDown: function() {
    console.log(this.name + " лег.");
  },

  // Метод для выполнения команды "бегать"
  run: function() {
    console.log(this.name + " бежит.");
  },

  // Метод для тренировки собаки с помощью команды
  train: function(command) {
    if (typeof this[command] === 'function') {
      // Используем метод call для выполнения функции обратного вызова с контекстом this объекта Dog
      this[command].call();
    } else {
      console.log(this.name + " не знает такой команды.");
    }
  }
};

// Тренировка собаки
Dog.train("sit"); // Ожидаемый вывод: Buddy сел.
Dog.train("lieDown"); // Ожидаемый вывод: Buddy лег.
Dog.train("run"); // Ожидаемый вывод: Buddy бежит.

// Попытка выполнить неизвестную команду
Dog.train("jump"); // Ожидаемый вывод: Buddy не знает такой команды.

// В этой задаче метод train принимает аргумент command, который представляет 
// собой команду для тренировки собаки. Метод train проверяет, существует ли 
// функция с таким именем в объекте Dog. Если функция существует, она вызывается 
// с помощью метода call, связывая ее с объектом Dog как контекстом this, что позволяет 
// выполнять методы объекта Dog в соответствии с командой.