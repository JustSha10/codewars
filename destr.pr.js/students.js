// Задача: У вас есть список студентов, представленный в виде массива объектов. 
// Каждый объект содержит информацию о студенте, такую как имя, возраст и средний балл. 
// Вам необходимо реализовать функцию для фильтрации списка студентов по заданным критериям, 
// таким как минимальный средний балл и максимальный возраст. 
// Для удобства работы с критериями вы решаете использовать деструктурирующее присваивание внутри функции фильтрации.

const students = [
  { name: 'Alice', age: 20, averageGrade: 4.5 },
  { name: 'Bob', age: 22, averageGrade: 3.8 },
  { name: 'Charlie', age: 21, averageGrade: 4.0 },
  { name: 'David', age: 19, averageGrade: 4.2 },
  { name: 'Emma', age: 20, averageGrade: 4.7 }
];

function filterStudents({ minAverageGrade, maxAge }) {
  return students.filter(({ averageGrade, age }) => {
    return (!minAverageGrade || averageGrade >= minAverageGrade) &&
           (!maxAge || age <= maxAge);
  });
}

const filteredStudents = filterStudents({ minAverageGrade: 4.0, maxAge: 21 });
console.log(filteredStudents);



// В представленной задаче замыкание используется неявно в функции filterStudents, 
// которая является замыканием в контексте функции filterStudents и охватывает внешнюю переменную students.

// Когда мы вызываем функцию filterStudents, она получает объект с критериями фильтрации и возвращает новый массив, 
// содержащий отфильтрованных студентов. Внутри функции filterStudents мы используем метод массива filter, 
// который принимает колбэк-функцию. Эта колбэк-функция, в свою очередь, имеет доступ к внешней переменной students, 
// определенной в родительской функции filterStudents.

// Поскольку функция filter создает замыкание вокруг своего контекста выполнения, она сохраняет 
// доступ к внешней переменной students даже после завершения работы функции filterStudents. 
// Это позволяет нам обращаться к students из колбэк-функции внутри filter.

// Таким образом, в момент вызова filterStudents создается замыкание, которое включает 
// в себя как функцию filterStudents, так и переменную students, и это замыкание сохраняется до тех пор, 
// пока существует ссылка на функцию filterStudents или любую другую функцию, которая ссылается на переменную students.